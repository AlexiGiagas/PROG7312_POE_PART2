@page
@model PROG7312_POE_PART2.Pages.FeedbackModel
@{
    ViewData["Title"] = "Feedback";
}

<div class="container mt-0">
    <h2 class="text-center mb-4">User Feedback</h2>

    <form method="post" enctype="multipart/form-data" class="form-horizontal" oninput="updateProgress()">
        <div class="form-group row mb-3">
            <label for="feedback" class="col-sm-2 col-form-label">Feedback:</label>
            <div class="col-sm-10">
                <textarea id="feedback" name="Feedback" class="form-control" rows="4" placeholder="Enter your feedback"
                          required>@Model.Feedback</textarea>
                <span asp-validation-for="Feedback" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group row mb-3">
            <label class="col-sm-2 col-form-label">Rating:</label>
            <div class="col-sm-10">
                <div class="star-rating">
                    <span class="star" data-value="1">&#9733;</span>
                    <span class="star" data-value="2">&#9733;</span>
                    <span class="star" data-value="3">&#9733;</span>
                    <span class="star" data-value="4">&#9733;</span>
                    <span class="star" data-value="5">&#9733;</span>
                </div>
                <input type="hidden" id="rating" name="Rating" value="0" />
                <span id="rating-error" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-sm-10 offset-sm-2">
                <button type="submit" class="btn btn-custom btn-primary">Submit</button>
                <a asp-page="/Index" class="btn btn-secondary">Back to Main Menu</a>
            </div>
        </div>
    </form>

    @if (Model.SuccessMessage != null)
    {
        <div class="alert alert-success mt-4 text-center">@Model.SuccessMessage</div>
    }

    <h3 class="mt-5">Previous Feedback</h3>
    <div class="feedback-list">
        @if (FeedbackModel.FeedbackDictionary.Count > 0)
        {
            foreach (var entry in FeedbackModel.FeedbackDictionary)
            {
                <div class="feedback-item">
                    <p><strong>Feedback:</strong> @entry.Value.Feedback</p>
                    <p><strong>Rating:</strong> @entry.Value.Rating/5</p>
                    <p><strong>Date:</strong> @DateTime.Now.ToString("dd/MM/yyyy HH:mm")</p>
                </div>
            }
        }
        else
        {
            <p>No feedback available yet.</p>
        }
    </div>
</div>

<style>
    body {
        font-family: 'Roboto', sans-serif;
    }

    h2, h3 {
        color: #333;
    }

    .feedback-list {
        margin-top: 20px;
        border-top: 2px solid #43A405;
        padding-top: 10px;
        background-color: #F9FBED;
        border-radius: 5px;
    }

    .feedback-item {
        margin-bottom: 15px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #EFFDDC;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .feedback-item p {
            margin: 5px 0;
        }

        .feedback-item strong {
            color: #43A405;
        }

    h2 {
        font-size: 2rem;
        font-weight: 500;
        color: #333;
    }

    .form-control {
        padding: 10px;
        font-size: 1rem;
    }

    .btn {
        padding: 10px 20px;
        font-size: 1rem;
    }

    .alert {
        font-size: 1.1rem;
    }

    .text-danger {
        font-size: 0.9rem;
    }

    .btn-custom {
        background-color: #43A405;
        color: white;
    }

        .btn-custom:hover {
            background-color: #368304;
        }

    .star-rating {
        display: flex;
        justify-content: flex-start;
    }

    .star {
        font-size: 2rem;
        color: #ddd;
        cursor: pointer;
        transition: color 0.2s;
    }

        .star.selected {
            color: #f39c12;
        }
</style>

<script>
        document.querySelectorAll('.star').forEach(star => {
        star.addEventListener('mouseover', function () {
            highlightStars(this.getAttribute('data-value'));
        });

        star.addEventListener('mouseout', function () {
            highlightStars(document.getElementById('rating').value);
        });

        star.addEventListener('click', function () {
            const ratingValue = this.getAttribute('data-value');
            document.getElementById('rating').value = ratingValue;
            highlightStars(ratingValue);
        });
    });

    function highlightStars(rating) {
        document.querySelectorAll('.star').forEach(star => {
            if (star.getAttribute('data-value') <= rating) {
                star.classList.add('selected');
            } else {
                star.classList.remove('selected');
            }
        });
    }

</script>
